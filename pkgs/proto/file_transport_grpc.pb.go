// 使用的语法版本

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: file_transport.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileTransport_SendFile_FullMethodName = "/FileTransport/SendFile"
	FileTransport_GetFile_FullMethodName  = "/FileTransport/GetFile"
)

// FileTransportClient is the client API for FileTransport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileTransportClient interface {
	SendFile(ctx context.Context, opts ...grpc.CallOption) (FileTransport_SendFileClient, error)
	GetFile(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (FileTransport_GetFileClient, error)
}

type fileTransportClient struct {
	cc grpc.ClientConnInterface
}

func NewFileTransportClient(cc grpc.ClientConnInterface) FileTransportClient {
	return &fileTransportClient{cc}
}

func (c *fileTransportClient) SendFile(ctx context.Context, opts ...grpc.CallOption) (FileTransport_SendFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileTransport_ServiceDesc.Streams[0], FileTransport_SendFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileTransportSendFileClient{stream}
	return x, nil
}

type FileTransport_SendFileClient interface {
	Send(*FileDataPacket) error
	CloseAndRecv() (*SendResp, error)
	grpc.ClientStream
}

type fileTransportSendFileClient struct {
	grpc.ClientStream
}

func (x *fileTransportSendFileClient) Send(m *FileDataPacket) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileTransportSendFileClient) CloseAndRecv() (*SendResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileTransportClient) GetFile(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (FileTransport_GetFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileTransport_ServiceDesc.Streams[1], FileTransport_GetFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileTransportGetFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileTransport_GetFileClient interface {
	Recv() (*FileDataPacket, error)
	grpc.ClientStream
}

type fileTransportGetFileClient struct {
	grpc.ClientStream
}

func (x *fileTransportGetFileClient) Recv() (*FileDataPacket, error) {
	m := new(FileDataPacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileTransportServer is the server API for FileTransport service.
// All implementations must embed UnimplementedFileTransportServer
// for forward compatibility
type FileTransportServer interface {
	SendFile(FileTransport_SendFileServer) error
	GetFile(*GetReq, FileTransport_GetFileServer) error
	mustEmbedUnimplementedFileTransportServer()
}

// UnimplementedFileTransportServer must be embedded to have forward compatible implementations.
type UnimplementedFileTransportServer struct {
}

func (UnimplementedFileTransportServer) SendFile(FileTransport_SendFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SendFile not implemented")
}
func (UnimplementedFileTransportServer) GetFile(*GetReq, FileTransport_GetFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedFileTransportServer) mustEmbedUnimplementedFileTransportServer() {}

// UnsafeFileTransportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileTransportServer will
// result in compilation errors.
type UnsafeFileTransportServer interface {
	mustEmbedUnimplementedFileTransportServer()
}

func RegisterFileTransportServer(s grpc.ServiceRegistrar, srv FileTransportServer) {
	s.RegisterService(&FileTransport_ServiceDesc, srv)
}

func _FileTransport_SendFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileTransportServer).SendFile(&fileTransportSendFileServer{stream})
}

type FileTransport_SendFileServer interface {
	SendAndClose(*SendResp) error
	Recv() (*FileDataPacket, error)
	grpc.ServerStream
}

type fileTransportSendFileServer struct {
	grpc.ServerStream
}

func (x *fileTransportSendFileServer) SendAndClose(m *SendResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileTransportSendFileServer) Recv() (*FileDataPacket, error) {
	m := new(FileDataPacket)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileTransport_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileTransportServer).GetFile(m, &fileTransportGetFileServer{stream})
}

type FileTransport_GetFileServer interface {
	Send(*FileDataPacket) error
	grpc.ServerStream
}

type fileTransportGetFileServer struct {
	grpc.ServerStream
}

func (x *fileTransportGetFileServer) Send(m *FileDataPacket) error {
	return x.ServerStream.SendMsg(m)
}

// FileTransport_ServiceDesc is the grpc.ServiceDesc for FileTransport service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileTransport_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FileTransport",
	HandlerType: (*FileTransportServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendFile",
			Handler:       _FileTransport_SendFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFile",
			Handler:       _FileTransport_GetFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "file_transport.proto",
}
