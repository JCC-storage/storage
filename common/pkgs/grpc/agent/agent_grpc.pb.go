// 使用的语法版本

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: pkgs/grpc/agent/agent.proto

package agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Agent_SendIPFSFile_FullMethodName = "/Agent/SendIPFSFile"
	Agent_GetIPFSFile_FullMethodName  = "/Agent/GetIPFSFile"
)

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	SendIPFSFile(ctx context.Context, opts ...grpc.CallOption) (Agent_SendIPFSFileClient, error)
	GetIPFSFile(ctx context.Context, in *GetIPFSFileReq, opts ...grpc.CallOption) (Agent_GetIPFSFileClient, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) SendIPFSFile(ctx context.Context, opts ...grpc.CallOption) (Agent_SendIPFSFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[0], Agent_SendIPFSFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &agentSendIPFSFileClient{stream}
	return x, nil
}

type Agent_SendIPFSFileClient interface {
	Send(*FileDataPacket) error
	CloseAndRecv() (*SendIPFSFileResp, error)
	grpc.ClientStream
}

type agentSendIPFSFileClient struct {
	grpc.ClientStream
}

func (x *agentSendIPFSFileClient) Send(m *FileDataPacket) error {
	return x.ClientStream.SendMsg(m)
}

func (x *agentSendIPFSFileClient) CloseAndRecv() (*SendIPFSFileResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SendIPFSFileResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) GetIPFSFile(ctx context.Context, in *GetIPFSFileReq, opts ...grpc.CallOption) (Agent_GetIPFSFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[1], Agent_GetIPFSFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &agentGetIPFSFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_GetIPFSFileClient interface {
	Recv() (*FileDataPacket, error)
	grpc.ClientStream
}

type agentGetIPFSFileClient struct {
	grpc.ClientStream
}

func (x *agentGetIPFSFileClient) Recv() (*FileDataPacket, error) {
	m := new(FileDataPacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility
type AgentServer interface {
	SendIPFSFile(Agent_SendIPFSFileServer) error
	GetIPFSFile(*GetIPFSFileReq, Agent_GetIPFSFileServer) error
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (UnimplementedAgentServer) SendIPFSFile(Agent_SendIPFSFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SendIPFSFile not implemented")
}
func (UnimplementedAgentServer) GetIPFSFile(*GetIPFSFileReq, Agent_GetIPFSFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetIPFSFile not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_SendIPFSFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServer).SendIPFSFile(&agentSendIPFSFileServer{stream})
}

type Agent_SendIPFSFileServer interface {
	SendAndClose(*SendIPFSFileResp) error
	Recv() (*FileDataPacket, error)
	grpc.ServerStream
}

type agentSendIPFSFileServer struct {
	grpc.ServerStream
}

func (x *agentSendIPFSFileServer) SendAndClose(m *SendIPFSFileResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *agentSendIPFSFileServer) Recv() (*FileDataPacket, error) {
	m := new(FileDataPacket)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Agent_GetIPFSFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetIPFSFileReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).GetIPFSFile(m, &agentGetIPFSFileServer{stream})
}

type Agent_GetIPFSFileServer interface {
	Send(*FileDataPacket) error
	grpc.ServerStream
}

type agentGetIPFSFileServer struct {
	grpc.ServerStream
}

func (x *agentGetIPFSFileServer) Send(m *FileDataPacket) error {
	return x.ServerStream.SendMsg(m)
}

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Agent",
	HandlerType: (*AgentServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendIPFSFile",
			Handler:       _Agent_SendIPFSFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetIPFSFile",
			Handler:       _Agent_GetIPFSFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkgs/grpc/agent/agent.proto",
}
